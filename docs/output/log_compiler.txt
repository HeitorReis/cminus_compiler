Initializing symbol table and scope stack...
[SYM_TABLE DBG] setFunctionParams: 'input' in scope 'global' with 0 params
[SYM_TABLE DBG] setFunctionParams: 'output' in scope 'global' with 1 params
Symbol table initialized successfully.
Parsing 'docs/test_files/teste5.txt'...
[LEX][1] VOID     -> 'void'
[LEX][1] ID       -> 'count'
[LEX][1] LPAREN   -> '('
[LEX][1] INT      -> 'int'
[LEX][1] ID       -> 'number'
[LEX][1] RPAREN   -> ')'
[AST DBG] newNode kind=AST_PARAM -> 0x559ae6404880
[AST DBG] newNode kind=AST_PARAM_LIST -> 0x559ae64048d0
[AST DBG] addChild parent=0x559ae64048d0(AST_PARAM_LIST, lineno=0) child=0x559ae6404880(AST_PARAM, lineno=1)
[LEX][1] LBRACE   -> '{'
[LEX][2] IF       -> 'if'
[LEX][2] LPAREN   -> '('
[LEX][2] ID       -> 'number'
[LEX][2] EQ       -> '=='
[SYM_TABLE DBG] useSymbol: 'number' in scope 'count' at line 2
[AST DBG] newNode kind=AST_ID -> 0x559ae6404920
[AST DBG] newIdNode("number") -> 0x559ae6404920
[AST DBG] newNode kind=AST_BINOP -> 0x559ae6404970
[LEX][2] NUM      -> '0' (0)
[AST DBG] newNode kind=AST_NUM -> 0x559ae64049a0
[AST DBG] newNumNode(0) -> 0x559ae64049a0
[LEX][2] RPAREN   -> ')'
[AST DBG] newNode kind=AST_BINOP -> 0x559ae64049d0
[AST DBG] addChild parent=0x559ae64049d0(AST_BINOP, lineno=2) child=0x559ae6404920(AST_ID, lineno=2)
[AST DBG] addChild parent=0x559ae64049d0(AST_BINOP, lineno=2) child=0x559ae6404970(AST_BINOP, lineno=2)
[AST DBG] addChild parent=0x559ae64049d0(AST_BINOP, lineno=2) child=0x559ae64049a0(AST_NUM, lineno=2)
[PARSER DBG] binop: left=0x559ae6404920 op=0x559ae6404970 right=0x559ae64049a0
[LEX][2] RETURN   -> 'return'
[LEX][2] SEMI     -> ';'
[AST DBG] newNode kind=AST_RETURN -> 0x559ae6404a00
[LEX][3] ID       -> 'output'
[AST DBG] newNode kind=AST_IF -> 0x559ae6404a50
[AST DBG] addChild parent=0x559ae6404a50(AST_IF, lineno=0) child=0x559ae64049d0(AST_BINOP, lineno=2)
[AST DBG] addChild parent=0x559ae6404a50(AST_IF, lineno=0) child=0x559ae6404a00(AST_RETURN, lineno=2)
[LEX][3] LPAREN   -> '('
[LEX][3] ID       -> 'number'
[LEX][3] RPAREN   -> ')'
[SYM_TABLE DBG] useSymbol: 'number' in scope 'count' at line 3
[AST DBG] newNode kind=AST_ID -> 0x559ae6404ac0
[AST DBG] newIdNode("number") -> 0x559ae6404ac0
[AST DBG] newNode kind=AST_ARG_LIST -> 0x559ae6404b10
[AST DBG] addChild parent=0x559ae6404b10(AST_ARG_LIST, lineno=3) child=0x559ae6404ac0(AST_ID, lineno=3)
[SYM_TABLE DBG] useSymbol: 'output' in scope 'count' at line 3
[AST DBG] newNode kind=AST_CALL -> 0x559ae6404b40
[AST DBG] addChild parent=0x559ae6404b40(AST_CALL, lineno=3) child=0x559ae6404b10(AST_ARG_LIST, lineno=3)
[LEX][3] SEMI     -> ';'
[LEX][4] ID       -> 'count'
[LEX][4] LPAREN   -> '('
[LEX][4] ID       -> 'number'
[LEX][4] MINUS    -> '-'
[SYM_TABLE DBG] useSymbol: 'number' in scope 'count' at line 4
[AST DBG] newNode kind=AST_ID -> 0x559ae6404bd0
[AST DBG] newIdNode("number") -> 0x559ae6404bd0
[AST DBG] newNode kind=AST_BINOP -> 0x559ae6404c20
[LEX][4] NUM      -> '1' (1)
[AST DBG] newNode kind=AST_NUM -> 0x559ae6404c50
[AST DBG] newNumNode(1) -> 0x559ae6404c50
[LEX][4] RPAREN   -> ')'
[AST DBG] newNode kind=AST_BINOP -> 0x559ae6404c80
[AST DBG] addChild parent=0x559ae6404c80(AST_BINOP, lineno=0) child=0x559ae6404bd0(AST_ID, lineno=4)
[AST DBG] addChild parent=0x559ae6404c80(AST_BINOP, lineno=0) child=0x559ae6404c20(AST_BINOP, lineno=4)
[AST DBG] addChild parent=0x559ae6404c80(AST_BINOP, lineno=0) child=0x559ae6404c50(AST_NUM, lineno=4)
[AST DBG] newNode kind=AST_ARG_LIST -> 0x559ae6404cb0
[AST DBG] addChild parent=0x559ae6404cb0(AST_ARG_LIST, lineno=4) child=0x559ae6404c80(AST_BINOP, lineno=0)
[SYM_TABLE DBG] useSymbol: 'count' in scope 'count' at line 4
[AST DBG] newNode kind=AST_CALL -> 0x559ae6404d00
[AST DBG] addChild parent=0x559ae6404d00(AST_CALL, lineno=4) child=0x559ae6404cb0(AST_ARG_LIST, lineno=4)
[LEX][4] SEMI     -> ';'
[LEX][5] RBRACE   -> '}'
[AST DBG] newNode kind=AST_BLOCK -> 0x559ae6404d50
[AST DBG] addChild parent=0x559ae6404d50(AST_BLOCK, lineno=5) child=0x559ae6404a50(AST_IF, lineno=0)
[AST DBG] addChild parent=0x559ae6404d50(AST_BLOCK, lineno=5) child=0x559ae6404b40(AST_CALL, lineno=3)
[AST DBG] addChild parent=0x559ae6404d50(AST_BLOCK, lineno=5) child=0x559ae6404d00(AST_CALL, lineno=4)
[PARSER DBG] compound_stmt: decls=(nil) stmts=0x559ae6404a50
[AST DBG] newNode kind=AST_FUN_DECL -> 0x559ae6404d80
[AST DBG] addChild parent=0x559ae6404d80(AST_FUN_DECL, lineno=1) child=0x559ae64048d0(AST_PARAM_LIST, lineno=0)
[AST DBG] addChild parent=0x559ae6404d80(AST_FUN_DECL, lineno=1) child=0x559ae6404d50(AST_BLOCK, lineno=5)
[SYM_TABLE DBG] setFunctionParams: 'count' in scope 'count' with 1 params
[PARSER DBG] fun_declaration: name=î#ÓøüU, params=0x559ae64048d0, body=0x559ae6404d50
[LEX][7] INT      -> 'int'
[LEX][7] ID       -> 'main'
[LEX][7] LPAREN   -> '('
[LEX][7] VOID     -> 'void'
[LEX][7] RPAREN   -> ')'
[LEX][7] LBRACE   -> '{'
[LEX][8] INT      -> 'int'
[LEX][8] ID       -> 'x'
[LEX][8] SEMI     -> ';'
[AST DBG] newNode kind=AST_VAR_DECL -> 0x559ae6404f50
[LEX][9] ID       -> 'x'
[LEX][9] ASSIGN   -> '='
[SYM_TABLE DBG] useSymbol: 'x' in scope 'main' at line 9
[AST DBG] newNode kind=AST_ID -> 0x559ae6404fc0
[AST DBG] newIdNode("x") -> 0x559ae6404fc0
[LEX][9] ID       -> 'input'
[LEX][9] LPAREN   -> '('
[LEX][9] RPAREN   -> ')'
[SYM_TABLE DBG] useSymbol: 'input' in scope 'main' at line 9
[AST DBG] newNode kind=AST_CALL -> 0x559ae6405030
[LEX][9] SEMI     -> ';'
[AST DBG] newNode kind=AST_ASSIGN -> 0x559ae6405080
[AST DBG] addChild parent=0x559ae6405080(AST_ASSIGN, lineno=9) child=0x559ae6404fc0(AST_ID, lineno=9)
[AST DBG] addChild parent=0x559ae6405080(AST_ASSIGN, lineno=9) child=0x559ae6405030(AST_CALL, lineno=9)
[PARSER DBG] assignment: var=0x559ae6404fc0 expr=0x559ae6405030
[LEX][10] ID       -> 'count'
[LEX][10] LPAREN   -> '('
[LEX][10] ID       -> 'x'
[LEX][10] RPAREN   -> ')'
[SYM_TABLE DBG] useSymbol: 'x' in scope 'main' at line 10
[AST DBG] newNode kind=AST_ID -> 0x559ae64050f0
[AST DBG] newIdNode("x") -> 0x559ae64050f0
[AST DBG] newNode kind=AST_ARG_LIST -> 0x559ae6405140
[AST DBG] addChild parent=0x559ae6405140(AST_ARG_LIST, lineno=10) child=0x559ae64050f0(AST_ID, lineno=10)
[SYM_TABLE DBG] useSymbol: 'count' in scope 'main' at line 10
[AST DBG] newNode kind=AST_CALL -> 0x559ae6405170
[AST DBG] addChild parent=0x559ae6405170(AST_CALL, lineno=10) child=0x559ae6405140(AST_ARG_LIST, lineno=10)
[LEX][10] SEMI     -> ';'
[LEX][11] RBRACE   -> '}'
[AST DBG] newNode kind=AST_BLOCK -> 0x559ae64051c0
[AST DBG] addChild parent=0x559ae64051c0(AST_BLOCK, lineno=11) child=0x559ae6404f50(AST_VAR_DECL, lineno=8)
[AST DBG] addChild parent=0x559ae64051c0(AST_BLOCK, lineno=11) child=0x559ae6405080(AST_ASSIGN, lineno=9)
[AST DBG] addChild parent=0x559ae64051c0(AST_BLOCK, lineno=11) child=0x559ae6405170(AST_CALL, lineno=10)
[PARSER DBG] compound_stmt: decls=0x559ae6404f50 stmts=0x559ae6405080
[AST DBG] newNode kind=AST_FUN_DECL -> 0x559ae64051f0
[AST DBG] addChild parent=0x559ae64051f0(AST_FUN_DECL, lineno=7) child=0x559ae64051c0(AST_BLOCK, lineno=11)
[SYM_TABLE DBG] setFunctionParams: 'main' in scope 'main' with 0 params
[PARSER DBG] fun_declaration: name=d*ÓøüU, params=(nil), body=0x559ae64051c0
[PARSER DBG] declaration_list: added main
[LEX][11] EOF
[AST DBG] newNode kind=AST_PROGRAM -> 0x559ae6405240
[AST DBG] addChild parent=0x559ae6405240(AST_PROGRAM, lineno=0) child=0x559ae6404d80(AST_FUN_DECL, lineno=1)
[AST DBG] addChild parent=0x559ae6405240(AST_PROGRAM, lineno=0) child=0x559ae64051f0(AST_FUN_DECL, lineno=7)
Parse successful.
======= SYMBOL TABLE =======
Name            Scope      Kind   Decl Lines           Use Lines            Type  
--------------------------------------------------------------------------
x               main       VAR    8 	10,9 	INT   
main            global     FUNC   7 	 	INT   
number          count      VAR    1 	4,3,2 	INT   
count           global     FUNC   1 	10,4 	VOID  
output          global     FUNC   0 	3 	VOID  
input           global     FUNC   0 	9 	INT   
======= END OF TABLE =======
Symbol table printed successfully.

=== AST ===
Program (lineno=0)
  FunDecl(name=count, lineno=1)
    ParamList (lineno=0)
      Param(name=number, lineno=1)
    Block (lineno=5)
      If (lineno=0)
        BinOp (lineno=2)
          Id(name=number, lineno=2)
          BinOp(op='==', lineno=2)
          Num(value=0, lineno=2)
        Return (lineno=2)
      Call(name=output, lineno=3)
        ArgList (lineno=3)
          Id(name=number, lineno=3)
      Call(name=count, lineno=4)
        ArgList (lineno=4)
          BinOp (lineno=0)
            Id(name=number, lineno=4)
            BinOp(op='-', lineno=4)
            Num(value=1, lineno=4)
  FunDecl(name=main, lineno=7)
    Block (lineno=11)
      VarDecl(name=x, lineno=8)
      Assign (lineno=9)
        Id(name=x, lineno=9)
        Call(name=input, lineno=9)
      Call(name=count, lineno=10)
        ArgList (lineno=10)
          Id(name=x, lineno=10)
[Semantic DBG] analyzeProgram: entering program node
[Semantic DBG] declaration: kind=3 name="count" at line 1
[Semantic DBG] analyzeDeclaration: kind=3 name="count" line=1
[Semantic DBG] FunDecl: name="count" line=1
[Semantic DBG]   return-type = void
[Semantic DBG]  switched currentScope = count
[Semantic DBG]   Found parameter list
[Semantic DBG]   Param: name="number" line=1
[Semantic DBG] analyzeBlock: scope="count"
[Semantic DBG]   Statement: kind=8 line=0
[Semantic DBG] ‚Üí analyzeStatement(stmt=0x559ae6404a50, kind=8, line=0)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae64049d0, kind=12, line=2)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404920, kind=14, line=2)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404920) returns 1
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae64049a0, kind=15, line=2)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae64049a0) returns 1
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae64049d0) returns 1
[Semantic DBG] ‚Üí analyzeStatement(stmt=0x559ae6404a00, kind=10, line=2)
[Semantic DBG] ‚Üê analyzeStatement(stmt=0x559ae6404a00)
[Semantic DBG] ‚Üê analyzeStatement(stmt=0x559ae6404a50)
[Semantic DBG]   Statement: kind=13 line=3
[Semantic DBG] ‚Üí analyzeStatement(stmt=0x559ae6404b40, kind=13, line=3)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404b40, kind=13, line=3)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404ac0, kind=14, line=3)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404ac0) returns 1
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404b40) returns 2
[Semantic DBG] ‚Üê analyzeStatement(stmt=0x559ae6404b40)
[Semantic DBG]   Statement: kind=13 line=4
[Semantic DBG] ‚Üí analyzeStatement(stmt=0x559ae6404d00, kind=13, line=4)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404d00, kind=13, line=4)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404c80, kind=12, line=0)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404bd0, kind=14, line=4)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404bd0) returns 1
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6404c50, kind=15, line=4)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404c50) returns 1
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404c80) returns 1
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6404d00) returns 2
[Semantic DBG] ‚Üê analyzeStatement(stmt=0x559ae6404d00)
[Semantic DBG]   currentScope restored to global
[Semantic DBG] declaration: kind=3 name="main" at line 7
[Semantic DBG] analyzeDeclaration: kind=3 name="main" line=7
[Semantic DBG] FunDecl: name="main" line=7
[Semantic DBG]   return-type = int
[Semantic DBG]  switched currentScope = main
[Semantic DBG]   No parameters, just a block
[Semantic DBG] analyzeBlock: scope="main"
[Semantic DBG] analyzeDeclaration: kind=2 name="x" line=8
[Semantic DBG]   VarDecl: type=unknown name=x
[Semantic DBG]   Statement: kind=11 line=9
[Semantic DBG] ‚Üí analyzeStatement(stmt=0x559ae6405080, kind=11, line=9)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6405080, kind=11, line=9)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6405030, kind=13, line=9)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6405030) returns 1
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6405080) returns 1
[Semantic DBG] ‚Üê analyzeStatement(stmt=0x559ae6405080)
[Semantic DBG]   Statement: kind=13 line=10
[Semantic DBG] ‚Üí analyzeStatement(stmt=0x559ae6405170, kind=13, line=10)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae6405170, kind=13, line=10)
[Semantic DBG] ‚Üí analyzeExpression(expr=0x559ae64050f0, kind=14, line=10)
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae64050f0) returns 1
[Semantic DBG] ‚Üê analyzeExpression(expr=0x559ae6405170) returns 2
[Semantic DBG] ‚Üê analyzeStatement(stmt=0x559ae6405170)
[Semantic DBG]   currentScope restored to global
Semantic analysis completed successfully with no errors.

=== IR ===

[IR_DBG] === Starting IR Generation ===
[IR_DBG] > generate_ir_for_node: Processing node kind AST_PROGRAM at line 0
[IR_DBG]   Case AST_PROGRAM
[IR_DBG] > generate_ir_for_node: Processing node kind AST_FUN_DECL at line 1
[IR_DBG]   Case AST_FUN_DECL for 'count'
[IR_DBG] Creating new name operand: count
[IR_DBG] Emitting instruction with opcode 14
[IR_DBG] > generate_ir_for_node: Processing node kind AST_BLOCK at line 5
[IR_DBG]   Case AST_BLOCK
[IR_DBG] > generate_ir_for_node: Processing node kind AST_IF at line 0
[IR_DBG]   Case AST_IF
[IR_DBG] Creating new label: L0
[IR_DBG] Creating new label: L1
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_BINOP at line 2
[IR_DBG]    Case AST_BINOP
[IR_DBG]      Operator: '=='
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_ID at line 2
[IR_DBG]    Case AST_ID
[IR_DBG] Creating new temporary: t0
[IR_DBG] Creating new name operand: number
[IR_DBG] Emitting instruction with opcode 1
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_ID
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_NUM at line 2
[IR_DBG]    Case AST_NUM
[IR_DBG] Creating new constant: 0
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_NUM
[IR_DBG] Creating new temporary: t1
[IR_DBG] Emitting instruction with opcode 8
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_BINOP
[IR_DBG] Emitting instruction with opcode 16
[IR_DBG] > generate_ir_for_node: Processing node kind AST_RETURN at line 2
[IR_DBG]   Case AST_RETURN
[IR_DBG] Emitting instruction with opcode 17
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_RETURN
[IR_DBG] Emitting instruction with opcode 15
[IR_DBG] Emitting instruction with opcode 14
[IR_DBG] Emitting instruction with opcode 14
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_IF
[IR_DBG] > generate_ir_for_node: Processing node kind AST_CALL at line 3
[IR_DBG]   Case AST_CALL (as statement)
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_CALL at line 3
[IR_DBG]    Case AST_CALL for function 'output'
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_ID at line 3
[IR_DBG]    Case AST_ID
[IR_DBG] Creating new temporary: t2
[IR_DBG] Creating new name operand: number
[IR_DBG] Emitting instruction with opcode 1
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_ID
[IR_DBG] Emitting instruction with opcode 18
[IR_DBG] Creating new constant: 1
[IR_DBG] Creating new name operand: output
[IR_DBG] Emitting instruction with opcode 19
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_CALL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_CALL
[IR_DBG] > generate_ir_for_node: Processing node kind AST_CALL at line 4
[IR_DBG]   Case AST_CALL (as statement)
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_CALL at line 4
[IR_DBG]    Case AST_CALL for function 'count'
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_BINOP at line 0
[IR_DBG]    Case AST_BINOP
[IR_DBG]      Operator: '-'
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_ID at line 4
[IR_DBG]    Case AST_ID
[IR_DBG] Creating new temporary: t3
[IR_DBG] Creating new name operand: number
[IR_DBG] Emitting instruction with opcode 1
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_ID
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_NUM at line 4
[IR_DBG]    Case AST_NUM
[IR_DBG] Creating new constant: 1
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_NUM
[IR_DBG] Creating new temporary: t4
[IR_DBG] Emitting instruction with opcode 5
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_BINOP
[IR_DBG] Emitting instruction with opcode 18
[IR_DBG] Creating new constant: 1
[IR_DBG] Creating new name operand: count
[IR_DBG] Emitting instruction with opcode 19
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_CALL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_CALL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_BLOCK
[IR_DBG] Emitting instruction with opcode 17
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_FUN_DECL
[IR_DBG] > generate_ir_for_node: Processing node kind AST_FUN_DECL at line 7
[IR_DBG]   Case AST_FUN_DECL for 'main'
[IR_DBG] Creating new name operand: main
[IR_DBG] Emitting instruction with opcode 14
[IR_DBG] > generate_ir_for_node: Processing node kind AST_BLOCK at line 11
[IR_DBG]   Case AST_BLOCK
[IR_DBG] > generate_ir_for_node: Processing node kind AST_VAR_DECL at line 8
[IR_DBG]   Skipping declaration node AST_VAR_DECL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_VAR_DECL
[IR_DBG] > generate_ir_for_node: Processing node kind AST_ASSIGN at line 9
[IR_DBG]   Case AST_ASSIGN (as statement)
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_ASSIGN at line 9
[IR_DBG]    Case AST_ASSIGN
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_CALL at line 9
[IR_DBG]    Case AST_CALL for function 'input'
[IR_DBG] Creating new temporary: t5
[IR_DBG] Creating new constant: 0
[IR_DBG] Creating new name operand: input
[IR_DBG] Emitting instruction with opcode 20
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_CALL
[IR_DBG] Creating new name operand: x
[IR_DBG] Emitting instruction with opcode 2
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_ASSIGN
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_ASSIGN
[IR_DBG] > generate_ir_for_node: Processing node kind AST_CALL at line 10
[IR_DBG]   Case AST_CALL (as statement)
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_CALL at line 10
[IR_DBG]    Case AST_CALL for function 'count'
[IR_DBG] >> generate_ir_for_expr: Processing expression kind AST_ID at line 10
[IR_DBG]    Case AST_ID
[IR_DBG] Creating new temporary: t6
[IR_DBG] Creating new name operand: x
[IR_DBG] Emitting instruction with opcode 1
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_ID
[IR_DBG] Emitting instruction with opcode 18
[IR_DBG] Creating new constant: 1
[IR_DBG] Creating new name operand: count
[IR_DBG] Emitting instruction with opcode 19
[IR_DBG] << generate_ir_for_expr: Finished processing expression kind AST_CALL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_CALL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_BLOCK
[IR_DBG] Emitting instruction with opcode 17
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_FUN_DECL
[IR_DBG] < generate_ir_for_node: Finished processing node kind AST_PROGRAM
[IR_DBG] === Finished IR Generation ===

--- BEGIN IR DUMP (Terminal) ---
count:
  t0 := *number
  t1 := t0 == 0
  if_false t1 goto L0
  return _
  goto L1
L0:
L1:
  t2 := *number
  arg t2
  call output, 1
  t3 := *number
  t4 := t3 - 1
  arg t4
  call count, 1
  return _
main:
  t5 := call input, 0
  *x := t5
  t6 := *x
  arg t6
  call count, 1
  return _
--- END IR DUMP ---
IR dump has been saved to: docs/output/generated_IR.txt
