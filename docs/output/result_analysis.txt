Cond: do 	 na  	Opcode: in  	Rd:  r13 	= (Rh) r0 	Operand: r0
Cond: do 	 i  	Opcode: mov  	Rd:  r14 	= (Rh) r0 	Operand: immediate 32
Cond: do 	 na  	Opcode: store  	Rd:  r0 	= (Rh) r13 	Operand: r14 (r13 recebe r14)
Cond: do 	 i  	Opcode: mov  	Rd:  r15 	= (Rh) r0 	Operand: immediate 2
Cond: do 	 i  	Opcode: mov  	Rd:  r16 	= (Rh) r0 	Operand: immediate 33
Cond: do 	 na  	Opcode: store  	Rd:  r0 	= (Rh) r15 	Operand: r16 (r15 recebe r16)
Cond: do 	 i  	Opcode: mov  	Rd:  r18 	= (Rh) r0 	Operand: immediate 32
Cond: do 	 na  	Opcode: load  	Rd:  r17 	= (Rh) r0 	Operand: r17 (r18 recebe r17)
Cond: do 	 i  	Opcode: mov  	Rd:  r20 	= (Rh) r0 	Operand: immediate 33
Cond: do 	 na  	Opcode: load  	Rd:  r19 	= (Rh) r0 	Operand: r20 (r19 recebe r20)
Cond: do 	 s  	Opcode: sub  	Rd:  r0 	= (Rh) r17 	Operand: r19
Cond: lteq 	 i  	Opcode: b    	Rd:  r0 	= (Rh) r0 	Operand: branch target 11
Cond: do 	 i  	Opcode: mov  	Rd:  r23 	= (Rh) r0 	Operand: immediate 32
Cond: do 	 na  	Opcode: load  	Rd:  r22 	= (Rh) r0 	Operand: r23 (r22 recebe r23)
Cond: do 	 na  	Opcode: mov  	Rd:  r1 	= (Rh) r22 	Operand: r0
Cond: do 	 na  	Opcode: mov  	Rd:  r4 	= (Rh) r1 	Operand: r0
Cond: do 	 i  	Opcode: b    	Rd:  r0 	= (Rh) r0 	Operand: branch target 11
Cond: do 	 i  	Opcode: mov  	Rd:  r26 	= (Rh) r0 	Operand: immediate 33
Cond: do 	 na  	Opcode: load  	Rd:  r25 	= (Rh) r0 	Operand: r26 (r25 recebe r26)
Cond: do 	 na  	Opcode: mov  	Rd:  r1 	= (Rh) r25 	Operand: r0
Cond: do 	 na  	Opcode: mov  	Rd:  r4 	= (Rh) r1 	Operand: r0
Cond: do 	 i  	Opcode: b    	Rd:  r0 	= (Rh) r0 	Operand: branch target 6
Cond: do 	 na  	Opcode: ret  	Rd:  r0 	= (Rh) r0 	Operand: immediate 0
Cond: do 	 na  	Opcode: add  	Rd:  r0 	= (Rh) r0 	Operand: r0
Cond: do 	 na  	Opcode: add  	Rd:  r0 	= (Rh) r0 	Operand: r0
Cond: do 	 na  	Opcode: add  	Rd:  r0 	= (Rh) r0 	Operand: r0