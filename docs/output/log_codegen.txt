

=== INICIANDO GERAÇÃO DE ASSEMBLY ===

--- Passagem 1A: Coletando definições de funções ---
[Passagem 1A] Função encontrada: 'main'
[ALLOC_INIT] Inicializando alocador para a função 'main'
[ALLOC_INIT] Pool de registradores definido: ['r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11']
[ALLOC_INIT] Registrador de spill reservado: r30
[ALLOC_INIT] Estado inicial: 23 registradores livres.
[FUNC_CTX] Contexto para a função 'main' criado.

--- Passagem 1B: Construindo a Tabela de Símbolos Globais ---
[Passagem 1B] Declaração de Vetor Global encontrada: 'vec' de tamanho 3
[SymbolTable] Adding symbol: <Symbol(name='vec', type=ARRAY(size=3, base_type=INT), scope='global', addr=32)>
--- Fim da Passagem 1: 1 símbolos globais encontrados. ---

--- Passagem 2: Traduzindo o IR para cada função ---

[Processando Função] -> 'main'
-> IR isolado para 'main' contém 17 instruções.
--> Parâmetros para 'main': ['output', 'vec', 'input', '_']
--> Variáveis Locais para 'main': ['gap']
--> Criando o layout da pilha para 'main'...
    -> Mapeando 'output' para o offset [fp, #-1]
    -> Mapeando 'vec' para o offset [fp, #-2]
    -> Mapeando 'input' para o offset [fp, #-3]
    -> Mapeando '_' para o offset [fp, #-4]
    -> Mapeando 'gap' para o offset [fp, #-5]
--> Tamanho total do frame para 'main': 16 palavras.
[ADD_INSTR] Adicionando instrução para 'main': subi: r30 = r31, 1
[ADD_INSTR] Adicionando instrução para 'main': store: [r30] = r1
[ADD_INSTR] Adicionando instrução para 'main': subi: r30 = r31, 2
[ADD_INSTR] Adicionando instrução para 'main': store: [r30] = r2
[ADD_INSTR] Adicionando instrução para 'main': subi: r30 = r31, 3
[ADD_INSTR] Adicionando instrução para 'main': store: [r30] = r3

--- [TRANSLATE] Processando IR: t0 := call input, 0 ---
[TRANSLATE] -> Detalhes: Destino='t0', Expressão='call input, 0'
[TRANSLATE] -> Caminho: Chamada de Função com Retorno
[SPILL_ALL] Verificando registradores sujos para salvar antes da chamada de função. Sujos: set()
[GET_TEMP] Solicitando registrador para o temporário 't0'.
[GET_FREE] -> Encontrado registrador livre: r12. Restantes: 22.
[ASSIGN_REG] Mapeando 't0' para r12.
[GET_TEMP] -> 't0' alocado no registrador r12.
[ADD_INSTR] Adicionando instrução para 'main': in: r12

--- [TRANSLATE] Processando IR: *gap := t0 ---
[TRANSLATE] -> Detalhes: Destino='*gap', Expressão='t0'
[TRANSLATE] -> Caminho: Armazenar em Ponteiro (*)
[ENSURE] Tentando garantir 't0' em um registrador.
[ENSURE] -> Sucesso! 't0' já está em r12.
[TRANSLATE] -> Endereço de destino é uma variável real. Obtendo endereço em registrador.
[GET_ADDR] Obtendo endereço para 'gap'.
[GET_FREE] -> Encontrado registrador livre: r13. Restantes: 21.
[GET_ADDR] -> 'gap' está na pilha. Calculando endereço [fp, #-5].
[ADD_INSTR] Adicionando instrução para 'main': subi: r13 = r31, 5
[ADD_INSTR] Adicionando instrução para 'main': store: [r13] = r12
[UNASSIGN_REG] Desmapeado r12 de 't0'.
[UNASSIGN_REG] -> Estado atual: 22 registradores livres. Mapeamentos: {}
[UNASSIGN_REG] r13 já estava desmapeado.
[UNASSIGN_REG] -> Estado atual: 23 registradores livres. Mapeamentos: {}

--- [TRANSLATE] Processando IR: t1 := *gap ---
[TRANSLATE] -> Detalhes: Destino='t1', Expressão='*gap'
[TRANSLATE] -> Caminho: Carregar de Ponteiro (*)
[TRANSLATE] -> Ponteiro é uma variável nomeada ('gap'). Buscando seu endereço.
[GET_ADDR] Obtendo endereço para 'gap'.
[GET_FREE] -> Encontrado registrador livre: r14. Restantes: 22.
[GET_ADDR] -> 'gap' está na pilha. Calculando endereço [fp, #-5].
[ADD_INSTR] Adicionando instrução para 'main': subi: r14 = r31, 5
[GET_TEMP] Solicitando registrador para o temporário 't1'.
[GET_FREE] -> Encontrado registrador livre: r15. Restantes: 21.
[ASSIGN_REG] Mapeando 't1' para r15.
[GET_TEMP] -> 't1' alocado no registrador r15.
[ADD_INSTR] Adicionando instrução para 'main': load: r15 = [r14]

--- [TRANSLATE] Processando IR: t2 := t1 - 1 ---
[TRANSLATE] -> Detalhes: Destino='t2', Expressão='t1 - 1'
[TRANSLATE] -> Caminho: Operação Aritmética
[ENSURE] Tentando garantir 't1' em um registrador.
[ENSURE] -> Sucesso! 't1' já está em r15.
[TRANSLATE] -> Operando 2 é um imediato: 1
[GET_TEMP] Solicitando registrador para o temporário 't2'.
[GET_FREE] -> Encontrado registrador livre: r16. Restantes: 20.
[ASSIGN_REG] Mapeando 't2' para r16.
[GET_TEMP] -> 't2' alocado no registrador r16.
[ADD_INSTR] Adicionando instrução para 'main': subi: r16 = r15, 1
[FREE_TEMP] Liberando registrador r15 que continha o temporário 't1'.
[UNASSIGN_REG] Desmapeado r15 de 't1'.
[UNASSIGN_REG] -> Estado atual: 21 registradores livres. Mapeamentos: {'t2': 'r16'}

--- [TRANSLATE] Processando IR: t3 := &vec ---
[TRANSLATE] -> Detalhes: Destino='t3', Expressão='&vec'
[TRANSLATE] -> Caminho: Obter Endereço (&)
[GET_TEMP] Solicitando registrador para o temporário 't3'.
[GET_FREE] -> Encontrado registrador livre: r17. Restantes: 20.
[ASSIGN_REG] Mapeando 't3' para r17.
[GET_TEMP] -> 't3' alocado no registrador r17.
[ADD_INSTR] Adicionando instrução para 'main': movi: r17 = 32

--- [TRANSLATE] Processando IR: t4 := t3 + 2 ---
[TRANSLATE] -> Detalhes: Destino='t4', Expressão='t3 + 2'
[TRANSLATE] -> Caminho: Operação Aritmética
[ENSURE] Tentando garantir 't3' em um registrador.
[ENSURE] -> Sucesso! 't3' já está em r17.
[TRANSLATE] -> Operando 2 é um imediato: 2
[GET_TEMP] Solicitando registrador para o temporário 't4'.
[GET_FREE] -> Encontrado registrador livre: r18. Restantes: 19.
[ASSIGN_REG] Mapeando 't4' para r18.
[GET_TEMP] -> 't4' alocado no registrador r18.
[ADD_INSTR] Adicionando instrução para 'main': addi: r18 = r17, 2
[FREE_TEMP] Liberando registrador r17 que continha o temporário 't3'.
[UNASSIGN_REG] Desmapeado r17 de 't3'.
[UNASSIGN_REG] -> Estado atual: 20 registradores livres. Mapeamentos: {'t2': 'r16', 't4': 'r18'}

--- [TRANSLATE] Processando IR: *t4 := t2 ---
[TRANSLATE] -> Detalhes: Destino='*t4', Expressão='t2'
[TRANSLATE] -> Caminho: Armazenar em Ponteiro (*)
[ENSURE] Tentando garantir 't2' em um registrador.
[ENSURE] -> Sucesso! 't2' já está em r16.
[TRANSLATE] -> Endereço de destino é uma variável temporária. Usando registrador temporário.
[ENSURE] Tentando garantir 't4' em um registrador.
[ENSURE] -> Sucesso! 't4' já está em r18.
[ADD_INSTR] Adicionando instrução para 'main': store: [r18] = r16
[UNASSIGN_REG] Desmapeado r16 de 't2'.
[UNASSIGN_REG] -> Estado atual: 21 registradores livres. Mapeamentos: {'t4': 'r18'}
[UNASSIGN_REG] Desmapeado r18 de 't4'.
[UNASSIGN_REG] -> Estado atual: 22 registradores livres. Mapeamentos: {}

--- [TRANSLATE] Processando IR: t5 := *gap ---
[TRANSLATE] -> Detalhes: Destino='t5', Expressão='*gap'
[TRANSLATE] -> Caminho: Carregar de Ponteiro (*)
[TRANSLATE] -> Ponteiro é uma variável nomeada ('gap'). Buscando seu endereço.
[GET_ADDR] Obtendo endereço para 'gap'.
[GET_FREE] -> Encontrado registrador livre: r19. Restantes: 21.
[GET_ADDR] -> 'gap' está na pilha. Calculando endereço [fp, #-5].
[ADD_INSTR] Adicionando instrução para 'main': subi: r19 = r31, 5
[GET_TEMP] Solicitando registrador para o temporário 't5'.
[GET_FREE] -> Encontrado registrador livre: r20. Restantes: 20.
[ASSIGN_REG] Mapeando 't5' para r20.
[GET_TEMP] -> 't5' alocado no registrador r20.
[ADD_INSTR] Adicionando instrução para 'main': load: r20 = [r19]

--- [TRANSLATE] Processando IR: t6 := &vec ---
[TRANSLATE] -> Detalhes: Destino='t6', Expressão='&vec'
[TRANSLATE] -> Caminho: Obter Endereço (&)
[GET_TEMP] Solicitando registrador para o temporário 't6'.
[GET_FREE] -> Encontrado registrador livre: r21. Restantes: 19.
[ASSIGN_REG] Mapeando 't6' para r21.
[GET_TEMP] -> 't6' alocado no registrador r21.
[ADD_INSTR] Adicionando instrução para 'main': movi: r21 = 32

--- [TRANSLATE] Processando IR: t7 := t6 + 0 ---
[TRANSLATE] -> Detalhes: Destino='t7', Expressão='t6 + 0'
[TRANSLATE] -> Caminho: Operação Aritmética
[ENSURE] Tentando garantir 't6' em um registrador.
[ENSURE] -> Sucesso! 't6' já está em r21.
[TRANSLATE] -> Operando 2 é um imediato: 0
[GET_TEMP] Solicitando registrador para o temporário 't7'.
[GET_FREE] -> Encontrado registrador livre: r22. Restantes: 18.
[ASSIGN_REG] Mapeando 't7' para r22.
[GET_TEMP] -> 't7' alocado no registrador r22.
[ADD_INSTR] Adicionando instrução para 'main': addi: r22 = r21, 0
[FREE_TEMP] Liberando registrador r21 que continha o temporário 't6'.
[UNASSIGN_REG] Desmapeado r21 de 't6'.
[UNASSIGN_REG] -> Estado atual: 19 registradores livres. Mapeamentos: {'t5': 'r20', 't7': 'r22'}

--- [TRANSLATE] Processando IR: *t7 := t5 ---
[TRANSLATE] -> Detalhes: Destino='*t7', Expressão='t5'
[TRANSLATE] -> Caminho: Armazenar em Ponteiro (*)
[ENSURE] Tentando garantir 't5' em um registrador.
[ENSURE] -> Sucesso! 't5' já está em r20.
[TRANSLATE] -> Endereço de destino é uma variável temporária. Usando registrador temporário.
[ENSURE] Tentando garantir 't7' em um registrador.
[ENSURE] -> Sucesso! 't7' já está em r22.
[ADD_INSTR] Adicionando instrução para 'main': store: [r22] = r20
[UNASSIGN_REG] Desmapeado r20 de 't5'.
[UNASSIGN_REG] -> Estado atual: 20 registradores livres. Mapeamentos: {'t7': 'r22'}
[UNASSIGN_REG] Desmapeado r22 de 't7'.
[UNASSIGN_REG] -> Estado atual: 21 registradores livres. Mapeamentos: {}

--- [TRANSLATE] Processando IR: t8 := &vec ---
[TRANSLATE] -> Detalhes: Destino='t8', Expressão='&vec'
[TRANSLATE] -> Caminho: Obter Endereço (&)
[GET_TEMP] Solicitando registrador para o temporário 't8'.
[GET_FREE] -> Encontrado registrador livre: r23. Restantes: 20.
[ASSIGN_REG] Mapeando 't8' para r23.
[GET_TEMP] -> 't8' alocado no registrador r23.
[ADD_INSTR] Adicionando instrução para 'main': movi: r23 = 32

--- [TRANSLATE] Processando IR: t9 := t8 + 2 ---
[TRANSLATE] -> Detalhes: Destino='t9', Expressão='t8 + 2'
[TRANSLATE] -> Caminho: Operação Aritmética
[ENSURE] Tentando garantir 't8' em um registrador.
[ENSURE] -> Sucesso! 't8' já está em r23.
[TRANSLATE] -> Operando 2 é um imediato: 2
[GET_TEMP] Solicitando registrador para o temporário 't9'.
[GET_FREE] -> Encontrado registrador livre: r24. Restantes: 19.
[ASSIGN_REG] Mapeando 't9' para r24.
[GET_TEMP] -> 't9' alocado no registrador r24.
[ADD_INSTR] Adicionando instrução para 'main': addi: r24 = r23, 2
[FREE_TEMP] Liberando registrador r23 que continha o temporário 't8'.
[UNASSIGN_REG] Desmapeado r23 de 't8'.
[UNASSIGN_REG] -> Estado atual: 20 registradores livres. Mapeamentos: {'t9': 'r24'}

--- [TRANSLATE] Processando IR: t10 := *t9 ---
[TRANSLATE] -> Detalhes: Destino='t10', Expressão='*t9'
[TRANSLATE] -> Caminho: Carregar de Ponteiro (*)
[TRANSLATE] -> Ponteiro é uma temporária ('t9'). Usando seu valor como endereço.
[ENSURE] Tentando garantir 't9' em um registrador.
[ENSURE] -> Sucesso! 't9' já está em r24.
[GET_TEMP] Solicitando registrador para o temporário 't10'.
[GET_FREE] -> Encontrado registrador livre: r25. Restantes: 19.
[ASSIGN_REG] Mapeando 't10' para r25.
[GET_TEMP] -> 't10' alocado no registrador r25.
[ADD_INSTR] Adicionando instrução para 'main': load: r25 = [r24]
[FREE_TEMP] Liberando registrador r24 que continha o temporário 't9'.
[UNASSIGN_REG] Desmapeado r24 de 't9'.
[UNASSIGN_REG] -> Estado atual: 20 registradores livres. Mapeamentos: {'t10': 'r25'}

--- [TRANSLATE] Processando IR: arg t10 ---
[TRANSLATE] -> Caminho: Passagem de Argumento (arg 1)
[ENSURE] Tentando garantir 't10' em um registrador.
[ENSURE] -> Sucesso! 't10' já está em r25.
[ADD_INSTR] Adicionando instrução para 'main': mov: r1 = r25

--- [TRANSLATE] Processando IR: call output, 1 ---
[TRANSLATE] -> Caminho: Chamada de Procedimento
[SPILL_ALL] Verificando registradores sujos para salvar antes da chamada de função. Sujos: {'r12', 'r24', 'r22', 'r25', 'r21', 'r23', 'r15', 'r18', 'r17', 'r16', 'r20'}
[ADD_INSTR] Adicionando instrução para 'main': out: r1
[UNASSIGN_REG] Desmapeado r25 de 't10'.
[UNASSIGN_REG] -> Estado atual: 21 registradores livres. Mapeamentos: {}

--- [TRANSLATE] Processando IR: return _ ---
[TRANSLATE] -> Caminho: Retorno de Função
[SPILL_ALL] Verificando registradores sujos para salvar antes da chamada de função. Sujos: {'r12', 'r24', 'r22', 'r21', 'r23', 'r15', 'r18', 'r17', 'r16', 'r20'}
[ADD_INSTR] Adicionando instrução para 'main': bi: main_epilogue
-> Finalizando a função 'main', fazendo spill de todos os registradores sujos.
[SPILL_ALL] Verificando registradores sujos para salvar antes da chamada de função. Sujos: {'r12', 'r24', 'r22', 'r21', 'r23', 'r15', 'r18', 'r17', 'r16', 'r20'}
--- Fim da Passagem 2 ---

--- Montagem Final: Construindo o arquivo assembly completo ---
[Montagem] Processando função 'main' com 26 instruções.
[Montagem] Adicionando a seção .data.
[Montagem] -> Variáveis a serem declaradas: ['vec']
=== GERAÇÃO DE ASSEMBLY CONCLUÍDA ===
--- ASSEMBLY CODE READY FOR YOUR ASSEMBLER ---
.text
.global main

	bi: main
main:
	movi: r29 = 63
	mov: r31 = r29
	subi: r29 = r29, 16
	subi: r30 = r31, 1
	store: [r30] = r1
	subi: r30 = r31, 2
	store: [r30] = r2
	subi: r30 = r31, 3
	store: [r30] = r3
	in: r12
	subi: r13 = r31, 5
	store: [r13] = r12
	subi: r14 = r31, 5
	load: r15 = [r14]
	subi: r16 = r15, 1
	movi: r17 = 32
	addi: r18 = r17, 2
	store: [r18] = r16
	subi: r19 = r31, 5
	load: r20 = [r19]
	movi: r21 = 32
	addi: r22 = r21, 0
	store: [r22] = r20
	movi: r23 = 32
	addi: r24 = r23, 2
	load: r25 = [r24]
	mov: r1 = r25
	out: r1
	bi: main_epilogue
main_epilogue:
	ret:

.data
stack_space: .space 64
var_vec: .space 3
---------------------------------------------


=== INICIANDO PROCESSO DE MONTAGEM (FullCode) ===
[INIT] Executando a primeira passagem para construir a tabela de símbolos...

--- [PASS 1] Iniciando a Primeira Passagem ---
[PASS 1] Etapa 1: Prevendo o tamanho de cada instrução na seção .text...

[DEBUG PASS 1] Tabela de Símbolos Final:
{
  "output": 1
}
--- Fim do Debug ---


[PASS 1] Etapa 2: Mapeando os rótulos de código para endereços...
[PASS 1] -> Rótulo 'main' mapeado para o endereço 1.
[PASS 1] -> Rótulo 'main_epilogue' mapeado para o endereço 30.

[PASS 1] Etapa 3: A seção de código termina no endereço 30. A seção .data começará em 31.

[PASS 1] Etapa 4: Mapeando os rótulos da seção .data...
[PASS 1] -> Rótulo de dados 'stack_space' mapeado para o endereço 31.
[PASS 1] -> Rótulo de dados 'var_vec' mapeado para o endereço 31.
--- Fim da Primeira Passagem ---
[INIT] Tabela de símbolos após a primeira passagem: {'output': 1, 'main': 1, 'main_epilogue': 30, 'stack_space': 31, 'var_vec': 31}
[INIT] Executando a segunda passagem para codificar as instruções...

--- [PASS 2] Iniciando a Segunda Passagem ---
[PASS 2] Etapa 1: Coletando literais grandes e atribuindo endereços a eles...
[PASS 2] -> Linha 6 ('mov: r31 = r29') é uma instrução 'mov' sem imediato. Ignorando para literais.
[PASS 2] -> Linha 31 ('mov: r1 = r25') é uma instrução 'mov' sem imediato. Ignorando para literais.
[PASS 2] -> Linha 32 ('out: r1') é uma instrução 'out'. Ignorando para literais.
[PASS 2] -> Nenhum literal grande encontrado.

[PASS 2] Etapa 2: Codificando cada linha de instrução para binário...

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'bi: main' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'bi: main'
[DISASSEMBLE] -> Parte do opcode: 'bi', Parte dos operandos: 'main'
[DISASSEMBLE] -> Instrução de branch identificada: 'bi'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'b', 'type': '11', 'op2': 'main'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'b', 'type': '11', 'op2': 'main'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'b', 'type': '11', 'op2': 'main'}
[ENCODE] -> Instrução de branch detectada: b com condição do
[INSTRUCTION] -> Codificação concluída. Binário: 00001110000000000000000000000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'movi: r29 = 63' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'movi: r29 = 63'
[DISASSEMBLE] -> Parte do opcode: 'movi', Parte dos operandos: 'r29 = 63'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'mov'
[DISASSEMBLE] -> Opcode final: 'mov', Tipo: 00
[DISASSEMBLE] -> Instrução 'mov' identificada. Destino: 'r29', Origem: '63'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r29', 'rh': 'r0', 'op2': '63'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r29', 'rh': 'r0', 'op2': '63'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r29', 'rh': 'r0', 'op2': '63'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010100011101000000000111111

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'mov: r31 = r29' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'mov: r31 = r29'
[DISASSEMBLE] -> Parte do opcode: 'mov', Parte dos operandos: 'r31 = r29'
[DISASSEMBLE] -> Opcode final: 'mov', Tipo: 00
[DISASSEMBLE] -> Instrução 'mov' identificada. Destino: 'r31', Origem: 'r29'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'mov', 'type': '00', 'rd': 'r31', 'rh': 'r0', 'op2': 'r29'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'mov', 'type': '00', 'rd': 'r31', 'rh': 'r0', 'op2': 'r29'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'mov', 'type': '00', 'rd': 'r31', 'rh': 'r0', 'op2': 'r29'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000000100011111000001110100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r29 = r29, 16' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r29 = r29, 16'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r29 = r29, 16'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r29', Origem: 'r29, 16'
[DISASSEMBLE] -> Operandos finais: Rd='r29', Rh='r29', Op2='16'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r29', 'rh': 'r29', 'op2': '16'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r29', 'rh': 'r29', 'op2': '16'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r29', 'rh': 'r29', 'op2': '16'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000111101111010000010000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r30 = r31, 1' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r30 = r31, 1'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r30 = r31, 1'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r30', Origem: 'r31, 1'
[DISASSEMBLE] -> Operandos finais: Rd='r30', Rh='r31', Op2='1'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '1'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '1'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '1'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000111110111110000000001

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'store: [r30] = r1' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'store: [r30] = r1'
[DISASSEMBLE] -> Parte do opcode: 'store', Parte dos operandos: '[r30] = r1'
[DISASSEMBLE] -> Opcode final: 'store', Tipo: 01
[DISASSEMBLE] -> Instrução Store com endereçamento por registrador. Dest detectado: [r30]. Source detectado: 'r1'
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r1'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r1'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r1'}
[ENCODE] -> Instrução Store detectada.
[ENCODE] -> rd_bin, rh_bin calculados: Rd(r0)=:00000 e Rh(r1)=:00001
[ENCODE] -> Op2 é um registrador: r30, convertido para binário: 1111000000
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000000000000011111000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r30 = r31, 2' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r30 = r31, 2'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r30 = r31, 2'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r30', Origem: 'r31, 2'
[DISASSEMBLE] -> Operandos finais: Rd='r30', Rh='r31', Op2='2'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '2'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '2'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '2'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000111110111110000000010

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'store: [r30] = r2' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'store: [r30] = r2'
[DISASSEMBLE] -> Parte do opcode: 'store', Parte dos operandos: '[r30] = r2'
[DISASSEMBLE] -> Opcode final: 'store', Tipo: 01
[DISASSEMBLE] -> Instrução Store com endereçamento por registrador. Dest detectado: [r30]. Source detectado: 'r2'
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r2'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r2'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r2'}
[ENCODE] -> Instrução Store detectada.
[ENCODE] -> rd_bin, rh_bin calculados: Rd(r0)=:00000 e Rh(r2)=:00010
[ENCODE] -> Op2 é um registrador: r30, convertido para binário: 1111000000
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000000000000101111000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r30 = r31, 3' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r30 = r31, 3'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r30 = r31, 3'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r30', Origem: 'r31, 3'
[DISASSEMBLE] -> Operandos finais: Rd='r30', Rh='r31', Op2='3'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '3'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '3'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r30', 'rh': 'r31', 'op2': '3'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000111110111110000000011

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'store: [r30] = r3' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'store: [r30] = r3'
[DISASSEMBLE] -> Parte do opcode: 'store', Parte dos operandos: '[r30] = r3'
[DISASSEMBLE] -> Opcode final: 'store', Tipo: 01
[DISASSEMBLE] -> Instrução Store com endereçamento por registrador. Dest detectado: [r30]. Source detectado: 'r3'
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r3'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r3'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r30', 'rh': 'r3'}
[ENCODE] -> Instrução Store detectada.
[ENCODE] -> rd_bin, rh_bin calculados: Rd(r0)=:00000 e Rh(r3)=:00011
[ENCODE] -> Op2 é um registrador: r30, convertido para binário: 1111000000
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000000000000111111000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'in: r12' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'in: r12'
[DISASSEMBLE] -> Parte do opcode: 'in', Parte dos operandos: 'r12'
[DISASSEMBLE] -> Opcode final: 'in', Tipo: 00
[DISASSEMBLE] -> Instrução de operando único. Rd: 'r12'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'in', 'type': '00', 'rd': 'r12', 'rh': 'r0', 'op2': '0'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'in', 'type': '00', 'rd': 'r12', 'rh': 'r0', 'op2': '0'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'in', 'type': '00', 'rd': 'r12', 'rh': 'r0', 'op2': '0'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000000100101100000000000000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r13 = r31, 5' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r13 = r31, 5'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r13 = r31, 5'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r13', Origem: 'r31, 5'
[DISASSEMBLE] -> Operandos finais: Rd='r13', Rh='r31', Op2='5'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r13', 'rh': 'r31', 'op2': '5'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r13', 'rh': 'r31', 'op2': '5'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r13', 'rh': 'r31', 'op2': '5'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000101101111110000000101

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'store: [r13] = r12' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'store: [r13] = r12'
[DISASSEMBLE] -> Parte do opcode: 'store', Parte dos operandos: '[r13] = r12'
[DISASSEMBLE] -> Opcode final: 'store', Tipo: 01
[DISASSEMBLE] -> Instrução Store com endereçamento por registrador. Dest detectado: [r13]. Source detectado: 'r12'
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r13', 'rh': 'r12'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r13', 'rh': 'r12'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r13', 'rh': 'r12'}
[ENCODE] -> Instrução Store detectada.
[ENCODE] -> rd_bin, rh_bin calculados: Rd(r0)=:00000 e Rh(r12)=:01100
[ENCODE] -> Op2 é um registrador: r13, convertido para binário: 0110100000
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000000000011000110100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r14 = r31, 5' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r14 = r31, 5'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r14 = r31, 5'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r14', Origem: 'r31, 5'
[DISASSEMBLE] -> Operandos finais: Rd='r14', Rh='r31', Op2='5'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r14', 'rh': 'r31', 'op2': '5'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r14', 'rh': 'r31', 'op2': '5'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r14', 'rh': 'r31', 'op2': '5'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000101110111110000000101

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'load: r15 = [r14]' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'load: r15 = [r14]'
[DISASSEMBLE] -> Parte do opcode: 'load', Parte dos operandos: 'r15 = [r14]'
[DISASSEMBLE] -> Opcode final: 'load', Tipo: 01
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r15', 'rh': 'r0', 'op2': 'r14'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r15', 'rh': 'r0', 'op2': 'r14'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r15', 'rh': 'r0', 'op2': 'r14'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000101111000000111000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r16 = r15, 1' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r16 = r15, 1'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r16 = r15, 1'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r16', Origem: 'r15, 1'
[DISASSEMBLE] -> Operandos finais: Rd='r16', Rh='r15', Op2='1'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r16', 'rh': 'r15', 'op2': '1'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r16', 'rh': 'r15', 'op2': '1'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r16', 'rh': 'r15', 'op2': '1'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000110000011110000000001

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'movi: r17 = 32' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'movi: r17 = 32'
[DISASSEMBLE] -> Parte do opcode: 'movi', Parte dos operandos: 'r17 = 32'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'mov'
[DISASSEMBLE] -> Opcode final: 'mov', Tipo: 00
[DISASSEMBLE] -> Instrução 'mov' identificada. Destino: 'r17', Origem: '32'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r17', 'rh': 'r0', 'op2': '32'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r17', 'rh': 'r0', 'op2': '32'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r17', 'rh': 'r0', 'op2': '32'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010100010001000000000100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'addi: r18 = r17, 2' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'addi: r18 = r17, 2'
[DISASSEMBLE] -> Parte do opcode: 'addi', Parte dos operandos: 'r18 = r17, 2'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'add'
[DISASSEMBLE] -> Opcode final: 'add', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r18', Origem: 'r17, 2'
[DISASSEMBLE] -> Operandos finais: Rd='r18', Rh='r17', Op2='2'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r18', 'rh': 'r17', 'op2': '2'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r18', 'rh': 'r17', 'op2': '2'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r18', 'rh': 'r17', 'op2': '2'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000010010100010000000010

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'store: [r18] = r16' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'store: [r18] = r16'
[DISASSEMBLE] -> Parte do opcode: 'store', Parte dos operandos: '[r18] = r16'
[DISASSEMBLE] -> Opcode final: 'store', Tipo: 01
[DISASSEMBLE] -> Instrução Store com endereçamento por registrador. Dest detectado: [r18]. Source detectado: 'r16'
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r18', 'rh': 'r16'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r18', 'rh': 'r16'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r18', 'rh': 'r16'}
[ENCODE] -> Instrução Store detectada.
[ENCODE] -> rd_bin, rh_bin calculados: Rd(r0)=:00000 e Rh(r16)=:10000
[ENCODE] -> Op2 é um registrador: r18, convertido para binário: 1001000000
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000000000100001001000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'subi: r19 = r31, 5' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'subi: r19 = r31, 5'
[DISASSEMBLE] -> Parte do opcode: 'subi', Parte dos operandos: 'r19 = r31, 5'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'sub'
[DISASSEMBLE] -> Opcode final: 'sub', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r19', Origem: 'r31, 5'
[DISASSEMBLE] -> Operandos finais: Rd='r19', Rh='r31', Op2='5'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r19', 'rh': 'r31', 'op2': '5'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r19', 'rh': 'r31', 'op2': '5'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'sub', 'type': '00', 'rd': 'r19', 'rh': 'r31', 'op2': '5'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000110011111110000000101

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'load: r20 = [r19]' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'load: r20 = [r19]'
[DISASSEMBLE] -> Parte do opcode: 'load', Parte dos operandos: 'r20 = [r19]'
[DISASSEMBLE] -> Opcode final: 'load', Tipo: 01
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r20', 'rh': 'r0', 'op2': 'r19'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r20', 'rh': 'r0', 'op2': 'r19'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r20', 'rh': 'r0', 'op2': 'r19'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000110100000001001100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'movi: r21 = 32' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'movi: r21 = 32'
[DISASSEMBLE] -> Parte do opcode: 'movi', Parte dos operandos: 'r21 = 32'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'mov'
[DISASSEMBLE] -> Opcode final: 'mov', Tipo: 00
[DISASSEMBLE] -> Instrução 'mov' identificada. Destino: 'r21', Origem: '32'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r21', 'rh': 'r0', 'op2': '32'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r21', 'rh': 'r0', 'op2': '32'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r21', 'rh': 'r0', 'op2': '32'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010100010101000000000100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'addi: r22 = r21, 0' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'addi: r22 = r21, 0'
[DISASSEMBLE] -> Parte do opcode: 'addi', Parte dos operandos: 'r22 = r21, 0'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'add'
[DISASSEMBLE] -> Opcode final: 'add', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r22', Origem: 'r21, 0'
[DISASSEMBLE] -> Operandos finais: Rd='r22', Rh='r21', Op2='0'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r22', 'rh': 'r21', 'op2': '0'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r22', 'rh': 'r21', 'op2': '0'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r22', 'rh': 'r21', 'op2': '0'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000010110101010000000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'store: [r22] = r20' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'store: [r22] = r20'
[DISASSEMBLE] -> Parte do opcode: 'store', Parte dos operandos: '[r22] = r20'
[DISASSEMBLE] -> Opcode final: 'store', Tipo: 01
[DISASSEMBLE] -> Instrução Store com endereçamento por registrador. Dest detectado: [r22]. Source detectado: 'r20'
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r22', 'rh': 'r20'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r22', 'rh': 'r20'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'store', 'type': '01', 'rd': 'r0', 'op2': 'r22', 'rh': 'r20'}
[ENCODE] -> Instrução Store detectada.
[ENCODE] -> rd_bin, rh_bin calculados: Rd(r0)=:00000 e Rh(r20)=:10100
[ENCODE] -> Op2 é um registrador: r22, convertido para binário: 1011000000
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000000000101001011000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'movi: r23 = 32' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'movi: r23 = 32'
[DISASSEMBLE] -> Parte do opcode: 'movi', Parte dos operandos: 'r23 = 32'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'mov'
[DISASSEMBLE] -> Opcode final: 'mov', Tipo: 00
[DISASSEMBLE] -> Instrução 'mov' identificada. Destino: 'r23', Origem: '32'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r23', 'rh': 'r0', 'op2': '32'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r23', 'rh': 'r0', 'op2': '32'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'mov', 'type': '00', 'rd': 'r23', 'rh': 'r0', 'op2': '32'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010100010111000000000100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'addi: r24 = r23, 2' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'addi: r24 = r23, 2'
[DISASSEMBLE] -> Parte do opcode: 'addi', Parte dos operandos: 'r24 = r23, 2'
[DISASSEMBLE] -> Sufixo de suporte encontrado: 'i'. Opcode final é 'add'
[DISASSEMBLE] -> Opcode final: 'add', Tipo: 00
[DISASSEMBLE] -> Instrução com atribuição. Destino: 'r24', Origem: 'r23, 2'
[DISASSEMBLE] -> Operandos finais: Rd='r24', Rh='r23', Op2='2'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r24', 'rh': 'r23', 'op2': '2'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r24', 'rh': 'r23', 'op2': '2'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'add', 'type': '00', 'rd': 'r24', 'rh': 'r23', 'op2': '2'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000010000011000101110000000010

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'load: r25 = [r24]' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'load: r25 = [r24]'
[DISASSEMBLE] -> Parte do opcode: 'load', Parte dos operandos: 'r25 = [r24]'
[DISASSEMBLE] -> Opcode final: 'load', Tipo: 01
[DISASSEMBLE] -> Instrução Load/Store com endereçamento por registrador.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r25', 'rh': 'r0', 'op2': 'r24'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r25', 'rh': 'r0', 'op2': 'r24'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'load', 'type': '01', 'rd': 'r25', 'rh': 'r0', 'op2': 'r24'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000100000111001000001100000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'mov: r1 = r25' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'mov: r1 = r25'
[DISASSEMBLE] -> Parte do opcode: 'mov', Parte dos operandos: 'r1 = r25'
[DISASSEMBLE] -> Opcode final: 'mov', Tipo: 00
[DISASSEMBLE] -> Instrução 'mov' identificada. Destino: 'r1', Origem: 'r25'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'mov', 'type': '00', 'rd': 'r1', 'rh': 'r0', 'op2': 'r25'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'mov', 'type': '00', 'rd': 'r1', 'rh': 'r0', 'op2': 'r25'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'mov', 'type': '00', 'rd': 'r1', 'rh': 'r0', 'op2': 'r25'}
[INSTRUCTION] -> Codificação concluída. Binário: 00000000100000001000001100100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'out: r1' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'out: r1'
[DISASSEMBLE] -> Parte do opcode: 'out', Parte dos operandos: 'r1'
[DISASSEMBLE] -> Instrução 'out' identificada.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'na', 'opcode': 'out', 'type': '00', 'rd': 'r0', 'rh': 'r0', 'op2': 'r1'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'out', 'type': '00', 'rd': 'r0', 'rh': 'r0', 'op2': 'r1'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'na', 'opcode': 'out', 'type': '00', 'rd': 'r0', 'rh': 'r0', 'op2': 'r1'}
[ENCODE] -> Instrução 'out' detectada.
[INSTRUCTION] -> Codificação concluída. Binário: 00000000101000000000000000100000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'bi: main_epilogue' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'bi: main_epilogue'
[DISASSEMBLE] -> Parte do opcode: 'bi', Parte dos operandos: 'main_epilogue'
[DISASSEMBLE] -> Instrução de branch identificada: 'bi'
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'b', 'type': '11', 'op2': 'main_epilogue'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'b', 'type': '11', 'op2': 'main_epilogue'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'b', 'type': '11', 'op2': 'main_epilogue'}
[ENCODE] -> Instrução de branch detectada: b com condição do
[INSTRUCTION] -> Codificação concluída. Binário: 00001110000000000000000000000000

--- [INSTRUCTION] Nova instrução em processamento na linha de montagem: 'ret:' ---
[INSTRUCTION] -> Passo 1: Desmontando a linha de assembly...
[DISASSEMBLE] Analisando: 'ret:'
[DISASSEMBLE] -> Instrução 'ret' identificada.
[INSTRUCTION] -> Desmontagem concluída. Detalhes: {'cond': 'do', 'supp': 'i', 'opcode': 'ret', 'type': '11'}
[INSTRUCTION] -> Passo 2: Codificando para binário...
[ENCODE] Iniciando codificação para a instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'ret', 'type': '11'}
[ENCODE] -> Tratando como instrução normal.
[ENCODE] -> Codificando instrução: {'cond': 'do', 'supp': 'i', 'opcode': 'ret', 'type': '11'}
[INSTRUCTION] -> Codificação concluída. Binário: 00001110111111111111111111111111

[PASS 2] -> 31 linhas de código de máquina geradas.

[PASS 2] Etapa 3: Adicionando a seção de dados e literais ao código de máquina final...
[PASS 2] -> Dados a serem adicionados (endereço: valor): [(31, '0'), (32, '0'), (33, '0'), (34, '0'), (35, '0'), (36, '0'), (37, '0'), (38, '0'), (39, '0'), (40, '0'), (41, '0'), (42, '0'), (43, '0'), (44, '0'), (45, '0'), (46, '0'), (47, '0'), (48, '0'), (49, '0'), (50, '0'), (51, '0'), (52, '0'), (53, '0'), (54, '0'), (55, '0'), (56, '0'), (57, '0'), (58, '0'), (59, '0'), (60, '0'), (61, '0'), (62, '0'), (63, '0'), (64, '0'), (65, '0'), (66, '0'), (67, '0'), (68, '0'), (69, '0'), (70, '0'), (71, '0'), (72, '0'), (73, '0'), (74, '0'), (75, '0'), (76, '0'), (77, '0'), (78, '0'), (79, '0'), (80, '0'), (81, '0'), (82, '0'), (83, '0'), (84, '0'), (85, '0'), (86, '0'), (87, '0'), (88, '0'), (89, '0'), (90, '0'), (91, '0'), (92, '0'), (93, '0'), (94, '0')]
--- Fim da Segunda Passagem ---
=== PROCESSO DE MONTAGEM CONCLUÍDO ===
--- DEBUG OUTPUT ---
00001110000000000000000000000000 -> cond[0000] type[11] supp[10] op[0000] offset_calc[(1 - 1) = 0]->bin[00000000000000000000]
00000010100011101000000000111111 -> cond[0000] type[00] supp[10] op[1000] Rd[11101] Rh[00000] imm[63=63]->[0000111111]
00000000100011111000001110100000 -> cond[0000] type[00] supp[00] op[1000] Rd[11111] Rh[00000] Ro[11101] pad[00000] (Mov sem imediato)
00000010000111101111010000010000 -> cond[0000] type[00] supp[10] op[0001] Rd[11101] Rh[11101] imm[16=16]->[0000010000]
00000010000111110111110000000001 -> cond[0000] type[00] supp[10] op[0001] Rd[11110] Rh[11111] imm[1=1]->[0000000001]
00000100000000000000011111000000 -> cond[0000] type[01] supp[00] op[0000] Rd[00000] Rh[00001] Ro[11110] pad[00000] (Store sem imediato)
00000010000111110111110000000010 -> cond[0000] type[00] supp[10] op[0001] Rd[11110] Rh[11111] imm[2=2]->[0000000010]
00000100000000000000101111000000 -> cond[0000] type[01] supp[00] op[0000] Rd[00000] Rh[00010] Ro[11110] pad[00000] (Store sem imediato)
00000010000111110111110000000011 -> cond[0000] type[00] supp[10] op[0001] Rd[11110] Rh[11111] imm[3=3]->[0000000011]
00000100000000000000111111000000 -> cond[0000] type[01] supp[00] op[0000] Rd[00000] Rh[00011] Ro[11110] pad[00000] (Store sem imediato)
00000000100101100000000000000000 -> cond[0000] type[00] supp[00] op[1001] Rd[01100] Rh[00000] Ro[00000] pad[00000]
00000010000101101111110000000101 -> cond[0000] type[00] supp[10] op[0001] Rd[01101] Rh[11111] imm[5=5]->[0000000101]
00000100000000000011000110100000 -> cond[0000] type[01] supp[00] op[0000] Rd[00000] Rh[01100] Ro[01101] pad[00000] (Store sem imediato)
00000010000101110111110000000101 -> cond[0000] type[00] supp[10] op[0001] Rd[01110] Rh[11111] imm[5=5]->[0000000101]
00000100000101111000000111000000 -> cond[0000] type[01] supp[00] op[0001] Rd[01111] Rh[00000] Ro[01110] pad[00000] (Load sem imediato)
00000010000110000011110000000001 -> cond[0000] type[00] supp[10] op[0001] Rd[10000] Rh[01111] imm[1=1]->[0000000001]
00000010100010001000000000100000 -> cond[0000] type[00] supp[10] op[1000] Rd[10001] Rh[00000] imm[32=32]->[0000100000]
00000010000010010100010000000010 -> cond[0000] type[00] supp[10] op[0000] Rd[10010] Rh[10001] imm[2=2]->[0000000010]
00000100000000000100001001000000 -> cond[0000] type[01] supp[00] op[0000] Rd[00000] Rh[10000] Ro[10010] pad[00000] (Store sem imediato)
00000010000110011111110000000101 -> cond[0000] type[00] supp[10] op[0001] Rd[10011] Rh[11111] imm[5=5]->[0000000101]
00000100000110100000001001100000 -> cond[0000] type[01] supp[00] op[0001] Rd[10100] Rh[00000] Ro[10011] pad[00000] (Load sem imediato)
00000010100010101000000000100000 -> cond[0000] type[00] supp[10] op[1000] Rd[10101] Rh[00000] imm[32=32]->[0000100000]
00000010000010110101010000000000 -> cond[0000] type[00] supp[10] op[0000] Rd[10110] Rh[10101] imm[0=0]->[0000000000]
00000100000000000101001011000000 -> cond[0000] type[01] supp[00] op[0000] Rd[00000] Rh[10100] Ro[10110] pad[00000] (Store sem imediato)
00000010100010111000000000100000 -> cond[0000] type[00] supp[10] op[1000] Rd[10111] Rh[00000] imm[32=32]->[0000100000]
00000010000011000101110000000010 -> cond[0000] type[00] supp[10] op[0000] Rd[11000] Rh[10111] imm[2=2]->[0000000010]
00000100000111001000001100000000 -> cond[0000] type[01] supp[00] op[0001] Rd[11001] Rh[00000] Ro[11000] pad[00000] (Load sem imediato)
00000000100000001000001100100000 -> cond[0000] type[00] supp[00] op[1000] Rd[00001] Rh[00000] Ro[11001] pad[00000] (Mov sem imediato)
00000000101000000000000000100000 -> cond[0000] type[00] supp[00] op[1010] Rd[00000] Rh[00000] Ro[00001] pad[00000] (Out sem imediato)
00001110000000000000000000000000 -> cond[0000] type[11] supp[10] op[0000] offset_calc[(30 - 30) = 0]->bin[00000000000000000000]
00001110111111111111111111111111 -> cond[0000] type[11] supp[10] op[1111] operand[-1]

Código de máquina gerado com sucesso em: docs/output/generated_machine_code.txt

--- Iniciando a Decodificação do Código de Máquina ---
--- Decodificação Concluída ---
--- MACHINE CODE DECODED ---
